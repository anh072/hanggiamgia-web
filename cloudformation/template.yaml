---
AWSTemplateFormatVersion: 2010-09-09

Transform: AWS::Serverless-2016-10-31

Description: CDN and SSR for the web

Parameters:
  Environment:
    Type: String
    Default: test
    AllowedValues:
    - test
    - dev
    - prod

  CNAME:
    Type: CommaDelimitedList
    Default: "giarevn.net, www.giarevn.net, *.giarevn.net"

  SSLCertificateArn:
    Type: String

Resources:
  S3Bucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !Sub 'giare-${Environment}-frontend'
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  ReadPolicy:
    Type: 'AWS::S3::BucketPolicy'
    Properties:
      Bucket: !Ref S3Bucket
      PolicyDocument:
        Statement:
        - Action: 's3:GetObject'
          Effect: Allow
          Resource: !Sub 'arn:aws:s3:::${S3Bucket}/*'
          Principal:
            CanonicalUser: !GetAtt CloudFrontOriginAccessIdentity.S3CanonicalUserId

  CDNLogBucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !Sub 'giare-${Environment}-cdn-logs'
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  CloudFrontOriginAccessIdentity:
    Type: 'AWS::CloudFront::CloudFrontOriginAccessIdentity'
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: !Ref S3Bucket

  CloudFrontDistribution:
    Type: 'AWS::CloudFront::Distribution'
    Properties:
      DistributionConfig:
        Aliases: !Ref CNAME
        ViewerCertificate:
          AcmCertificateArn: !Ref SSLCertificateArn
          MinimumProtocolVersion: TLSv1
          SslSupportMethod: sni-only
        DefaultCacheBehavior: # api gateway
          AllowedMethods:
          - GET
          - HEAD
          - OPTIONS
          Compress: true
          ForwardedValues: # deprecated
            Cookies:
              Forward: none
            QueryString: true
          TargetOriginId: server
          ViewerProtocolPolicy: redirect-to-https
          MaxTTL: 0
          MinTTL: 0
        CacheBehaviors: # S3
        - AllowedMethods:
          - GET
          - HEAD
          - OPTIONS
          CachedMethods:
          - GET
          - HEAD
          - OPTIONS
          TargetOriginId: s3origin
          PathPattern: /*.*
          ViewerProtocolPolicy: redirect-to-https
          ForwardedValues: # deprecated
            Cookies:
              Forward: none
            QueryString: true
          MaxTTL: 86400 # deprecated
          MinTTL: 60 # deprecated
          Compress: true
          DefaultTTL: 300
        Enabled: true
        HttpVersion: http2
        Origins:
        - DomainName: !GetAtt 'S3Bucket.RegionalDomainName'
          Id: s3origin
          S3OriginConfig:
            OriginAccessIdentity: !Sub 'origin-access-identity/cloudfront/${CloudFrontOriginAccessIdentity}'
        - Id: server
          DomainName:
            Fn::Join:
            - ""
            - - Ref: FrontEndApi
              - ".execute-api."
              - Ref: AWS::Region
              - ".amazonaws.com"
          CustomOriginConfig:
            OriginProtocolPolicy: https-only
        PriceClass: 'PriceClass_200'
        Logging:
          Bucket: !GetAtt 'CDNLogBucket.RegionalDomainName'
          Prefix: cdn

  FrontEndApiLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub 'giare-${Environment}-frontend-api-logs'
      RetentionInDays: 30

  FrontEndApi:
    Type: AWS::Serverless::HttpApi
    Properties:
      AccessLogSettings:
        DestinationArn: !GetAtt FrontEndApiLogGroup.Arn
        Format: '{ "requestId":"$context.requestId", "ip": "$context.identity.sourceIp", "requestTime":"$context.requestTime", "httpMethod":"$context.httpMethod","routeKey":"$context.routeKey", "status":"$context.status","protocol":"$context.protocol", "responseLength":"$context.responseLength","latency":"$context.responseLatency","domainName":"$context.domainName"}'

  FrontEndFunction:
    Type: AWS::Serverless::Function
    Properties:
      Events:
        ApiEvent:
          Type: HttpApi
          Properties:
            Path: /{proxy+}
            Method: get
            ApiId:
              Ref: FrontEndApi
      FunctionName: !Sub 'giare-${Environment}-frontend-function'
      Runtime: nodejs12.x
      CodeUri: ../bin/lambda.zip
      Handler: app/index.handler
      Timeout: 5
